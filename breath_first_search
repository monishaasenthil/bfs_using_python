import networkx as nx

# Create a directed graph
G = nx.DiGraph()

# Add nodes
nodes = ['S', 'A', 'B', 'C', 'D', 'E', 'G']
G.add_nodes_from(nodes)

# Add edges
edges = [
    ('S', 'A'), ('S', 'B'), ('A', 'D'), ('B', 'C'), ('C', 'E'), ('D', 'G'), ('B', 'A')
]
G.add_edges_from(edges)

# Breadth-First Search (BFS)
def breadth_first_search(graph, start, goal):
    queue = [(start, [start])]

    while queue:
        node, path = queue.pop(0)

        if node == goal:
            return path

        for neighbor in graph.successors(node):
            if neighbor not in path:
                new_path = path + [neighbor]
                queue.append((neighbor, new_path))
    return None

source = 'S'
goal = 'G'

# Find a path from 'S' to 'G' using BFS
bfs_path = breadth_first_search(G, source, goal)

# Print the BFS path
if bfs_path:
    print("BFS Path: " + " -> ".join(bfs_path))
else:
    print("No path found using BFS")
